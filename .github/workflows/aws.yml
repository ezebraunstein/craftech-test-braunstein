name: CI/CD Prueba 3

on:
  push:
    paths:
      - 'prueba-3/frontend/public/index.html'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and Push Frontend Docker images
        run: |
          cd prueba-3/frontend
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/react:${{ github.sha }} -f Dockerfile.build .
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/nginx:${{ github.sha }} -f Dockerfile.nginx .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/react:${{ github.sha }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/nginx:${{ github.sha }}

      - name: Build and Push Backend Docker image
        run: |
          cd prueba-3/backend
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/backend:${{ github.sha }} -f Dockerfile . 
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/backend:${{ github.sha }}

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_PUBLIC_DNS }} >> ~/.ssh/known_hosts
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Conditionally Check Port 80
        run: |
          ssh -v -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_PUBLIC_DNS }} '
          echo "Checking for any process using port 80..."
          if sudo lsof -i :80; then
            echo "Process found on port 80, attempting to terminate..."
            sudo fuser -k 80/tcp
          else
            echo "No process found on port 80. No action needed."
          fi
          '
          
      - name: Stop and remove existing container
        run: |
          ssh -v -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_PUBLIC_DNS }} '
          if [ "$(docker ps -q -f name=nginx-container)" ]; then
            docker stop nginx-container;
          fi
          if [ "$(docker ps -a -q -f name=nginx-container)" ]; then
            docker rm nginx-container;
          fi
          '

      - name: Deploy to AWS EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_PUBLIC_DNS }}
          username: ec2-user
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd craftech-test-braunstein/prueba-3
            git pull origin main
            docker-compose down
            docker-compose pull
            docker-compose up -d --build
